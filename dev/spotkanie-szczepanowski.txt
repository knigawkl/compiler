Generator to najważniejsza część projektu.
Pierwsza część 7. maja.
Druga część najpóźniej 11. czerwca.
Preferowany 28. maja. Wtedy ocenianie przychylnym okiem.
Przygotować instrukcję obsługi języka, opisać gramatykę.
Przy rozszerzaniu typów w pierwszym projekcie, spodziewana jest obsługa rzutowania między typami.
Jeśli chodzi o obsługę operacji arytmetycznych, to mile widziane są bajery takie jak potęgowanie, dzielenie, modulo, ale najważniejsze to te 4 podstawowe.
Dobrze żeby można było też wykonywać działania na zmiennych.
Dobrze żeby była obsługa nawiasów.
Obsługa błędów ma być na poziomie, więc trzeba wywalić niespodziewany token w tej linijce w tej kolumnie itp.
Obsługa zmiennych tablicowych: żeby dało się zainicjalizować, zmienić wartości, odnieść się do któregoś elementu tablicy (indeksowanie).
Obsługa ciągu znaków -- żeby dało się inicjalizować, wczytywać do tego napisu, wypisywać wartość, fajnie żeby było rzutowanie na liczbę z tego napisu, konkatenację napisów.
Obsłuzyć wyrażenie wewnątrz ifa, może jakiś operator porównania.
Dobrze żeby udało się też zrobić else.
Przy pętlach dobrze, żeby można było je wykonać x razy, gdzie x jest jakąś zmienną.
Fajnie jeśli będą obsłużone zmienne lokalne, a nie tylko globalne.
W rzozszerzeniu o struktury chodzi o to, aby można było je zdefiniować, tworzyć obiekty tego typu, ważne żeby dwie struktury tego sameg typu ale o innych wartościach pól mogły mieć właśnie różne wartości w tych polach.
Wybór narzędzia jest dowolny, ale narzędzia które same będą generować kod llvm są niedopuszczalne.

Prawy PM + generate ANTLR.
Nie edytować plików wygenerowanych, bo potem kolejna generacja nam to nadpisze.

W ramach drugiego projektu będziemy musieli za pomocą generatora wygenerować plik ll.
To już raczej przy pomocy C i clang.
clang -emit-llvm -S sample.c
W tym poradniku do języka trzeba wszystkie główne funkcjonalności zawrzeć.
To się przyda też nam żeby pamiętać jak wygląda nasz język.
Też żeby szybko ogarnąć co ten drugi dodał ostatnio.

Typy rzeczywiste i całkowite i rzutowanie muszą być na pierwsze spotkanie gotowe.
Obsługa standardowego we/wy też.
Operacje arytmetyczne powinny działać także na zmiennych.
Komunikat nieprawidłowy token, jak będzie coś w stylu spodziewano się tego, a dostano to to w ogóle pięknie będzie.
Konkatenacja napisów powinna być możliwa.
Wewnątrz ifa powinno się dać zrobić wyrażenie, nie tylko if True ale coś większego.

